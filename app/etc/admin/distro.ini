[production]

; Nota: Para poder parsear variables del mismo archivo de configuracion es necesario aplicarle el callback replaceConfigSelfVars

; Paths (No necesitan ser modificadas generalmente)
	distro.system.base			=	"{base_path}"
	distro.system.app			=	"{app_path}"
	distro.system.www			=	"{www_path}"
	;
	distro.system.code			=	"{code_path}"
	distro.system.design		=	"{app_path}/design"
	distro.system.etc			=	"{etc_path}"
	distro.system.core			=	"{code_path}/Core"
	distro.system.local			=	"{code_path}/Local"
	distro.system.local_etc		=	"{code_path}/Local/etc"
	distro.system.var			=	"{app_path}/var"
	;
	distro.system.cache.base	=	"{app_path}/var/cache"
	distro.system.cache.config	=	"{app_path}/var/cache/config"
	distro.system.cache.design	=	"{app_path}/var/cache/design"
	distro.system.session		=	"{app_path}/var/session"
	distro.system.log			=	"{app_path}/var/log"
	;
	distro.system.locale		=	"{app_path}/locale"
	distro.system.cache.locale	=	"{app_path}/var/cache/locale"
	;
	distro.system.skin			=	"{www_path}/skin"
	distro.system.js			=	"{www_path}/js"
	distro.system.jslib			=	"{www_path}/js/lib"

; Urls

	; Tipos de hosts disponibles
		;distro.web.host.http			=	"http://{current_host}"
		;distro.web.host.https			=	"https://{current_host}"
		;distro.web.host.static			=	"http://{current_host}"

		distro.web.host.static			=	"http://{current_host}"
		distro.web.host.http			=	"http://local.placestogo.mx"
		distro.web.host.https			=	"http://local.placestogo.mx"

	; Urls
		; Imprescindibles ([www]: raíz donde está el document root. [base]: url base de la peticion (donde esta el script lanzador) [current]: url actual de nuestra petición )
			distro.web.url.www				=	"" ; directorio donde se encuentra el www (99% de probabilidades de coincidir con el document_root, por tanto, puede quedar vacio)
			distro.web.url.base				=	"{base_url}"
			distro.web.url.current			=	"{current_url}"
		; Adicionales
			distro.web.url.skin				=	"{{distro.web.url.www}}/skin"
			distro.web.url.js				=	"{{distro.web.url.www}}/js"
			distro.web.url.jslib			=	"{{distro.web.url.www}}/js/lib" ; Acceso a librerias de JavaScript
			distro.web.url.media			=	"{{distro.web.url.www}}/media"

	; Plantillas para urls en funcion del protocolo en uso y el tipo de url a generar, utilizados por App url
	; El protocolo en uso es autodetectado con en App getProtocol
		; Por defecto, la url provista se devolvera tal cual
			distro.web.tpl.http.default		=	"{{distro.web.host.http}}"
		; Se añade el host.static a la url provista
			distro.web.tpl.http.static		=	"{{distro.web.host.static}}"
		; Por defecto, la url provista se devolvera tal cual
			distro.web.tpl.https.default	=	"{{distro.web.host.https}}"
		; Por defecto, la url provista se devolvera tal cual
			distro.web.tpl.https.static		=	"{{distro.web.host.https}}"


[devel : production]
	; En el caso de desarrollo, no tenemos servidor https, así que definimos como http el host normal y como https el mismo host pero con devssl
	; (Core_Model_Url esta preparado para identificar el host devssl como protocolo ssl aunque no sea cierto).
	distro.web.host.static		=	"http://local.placestogo.mx"
	distro.web.host.http		=	"http://local.placestogo.mx"
	distro.web.host.https		=	"http://local.placestogo.mx"

